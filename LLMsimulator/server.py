import asyncio

from grpclib.utils import graceful_exit
from grpclib.server import Server, Stream

# generated by protoc
from server.LLMsimulator_pb2 import HelloRequest, HelloReply
from server.LLMsimulator_grpc import GreeterBase

from server.LLMsimulator_pb2 import ProfilerInput, ProfilerOutput
from server.LLMsimulator_pb2 import CommunicatorInput, CommunicatorOutput

class Greeter(GreeterBase):

    async def SayHello(self, stream: Stream[HelloRequest, HelloReply]) -> None:
        request = await stream.recv_message()
        assert request is not None
        message = f'Hello, {request.name}!'
        await stream.send_message(HelloReply(message=message))

    async def profiler(self, stream: Stream[ProfilerInput, ProfilerOutput]) -> None:
         request = await stream.recv_message()
         assert request is not None
         print(f'RANK {request.rank} Runs test spend {request.time}')
         await stream.send_message(ProfilerOutput(success = True))

         
    async def communicator(self, stream: Stream[CommunicatorInput, CommunicatorOutput]) -> None:
         request = await stream.recv_message()
         assert request is not None
         print(f'RANK {request.rank} Runs communicator spend {request.time}')
         await stream.send_message(CommunicatorOutput(success = True))


async def main(*, host: str = '127.0.0.1', port: int = 50051) -> None:
    server = Server([Greeter()])
    # Note: graceful_exit isn't supported in Windows
    with graceful_exit([server]):
        await server.start(host, port)
        print(f'Serving on {host}:{port}')
        await server.wait_closed()


if __name__ == '__main__':
    asyncio.run(main())
